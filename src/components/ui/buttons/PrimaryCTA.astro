---
import { externalLinks, type ExternalLinkKey } from "@/data_files/constants";
import Icon from "@components/ui/icons/Icon.astro";

const { title, url, noArrow, openInNewTab = false } = Astro.props;

interface Props {
  title?: string;
  url?: string;
  noArrow?: boolean;
  openInNewTab?: boolean;
}

function isExternalLinkKey(key: string): key is ExternalLinkKey {
  return key in externalLinks;
}

function isWrappedInCurlyBraces(url: string) {
  return url.startsWith("{") && url.endsWith("}");
}

function parseUrl(url: string | undefined): string | undefined {
  if (url && isWrappedInCurlyBraces(url)) {
    const key = url.slice(1, -1).split(".")[1];

    if (!isExternalLinkKey(key)) {
      return undefined;
    }

    const value = externalLinks[key];

    if (typeof value === "object") {
      return undefined;
    }
  }

  return url;
}

const target = openInNewTab ? "_blank" : "_self";
const baseClasses =
  "group inline-flex items-center justify-center gap-x-2 rounded-lg px-4 py-3 text-sm font-bold text-neutral-50 ring-zinc-500 transition duration-300 focus-visible:ring-3 outline-hidden";
const borderClasses = "border border-transparent";
const bgColorClasses =
  "bg-orange-400 hover:bg-orange-500 active:bg-orange-500 dark:focus:outline-hidden";
const disableClasses = "disabled:pointer-events-none disabled:opacity-50";
const fontSizeClasses = "2xl:text-base";
const ringClasses = "dark:ring-zinc-200";
---

<a
  class={`${baseClasses} ${borderClasses} ${bgColorClasses} ${disableClasses} ${fontSizeClasses} ${ringClasses}`}
  href={parseUrl(url)}
  target={target}
>
  {title}
  {noArrow ? null : <Icon name="arrowRight" />}
</a>
